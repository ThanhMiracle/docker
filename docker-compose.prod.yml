services:
  api:
    image: thanh2909/simple-fullstack-docker-v3-ci-tests-api:v0.2
    environment:
      - DATABASE_URL=${DATABASE_URL}                # e.g. postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/mydb
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-120}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-http://minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET:-uploads}
      - MINIO_SECURE=${MINIO_SECURE:-false}
      - MINIO_PUBLIC_URL=${MINIO_PUBLIC_URL}       # e.g. http://<PUBLIC_IP>/minio-public
    networks: [appnet]
    restart: unless-stopped
    depends_on: [db, minio]
    # no host ports exposed

  frontend:
    image: thanh2909/simple-fullstack-docker-v3-ci-tests-frontend:v0.0
    environment:
      - VITE_API_BASE=${VITE_API_BASE:-/api}       # use path-based to avoid hardcoding the IP
    networks: [appnet]
    restart: unless-stopped
    depends_on: [api]

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: mydb
    volumes:
      - db_data:/var/lib/postgresql/data
    networks: [appnet]
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    networks: [appnet]
    restart: unless-stopped

  caddy:
    image: caddy:2
    restart: unless-stopped
    # Only HTTP on port 80 because we don't have a domain
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks: [appnet]
    depends_on:
      - api
      - frontend
      - minio

networks:
  appnet:

volumes:
  db_data:
  minio_data:
  caddy_data:
  caddy_config:
